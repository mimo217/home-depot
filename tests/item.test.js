const request = require('supertest')
const mongoose = require('mongoose')
const { MongoMemoryServer } = require('mongodb-memory-server')
const app = require('../app-server')
const server = app.listen(8030, () => console.log(`8030 ITEM TEST`))
const Item = require('../models/item')
const Category = require('../models/category')
const Department = require('../models/department')
const User = require('../models/user')
let mongoServer

beforeAll(async () => {
    mongoServer = await MongoMemoryServer.create()
    await mongoose.connect(mongoServer.getUri())
})

afterAll(async () => {
    await mongoose.connection.close()
    mongoServer.stop()
    server.close()
})

describe('Test the item endpoints', () => {
    test('It should display an item', async () => {
        const user = new User({ name: 'test', email: 'test20@email.com', password: 'test' })
        await user.save()
        const token = await user.createJWT()
        const item = new Item({ name: 'test', description: 'test', price: 100})
        await item.save()
        const response = await request(app)
            .get(`api/items/${item._id}`)
            .set(`Authorization`, `Bearer ${token}`)
    expect(response.body.name).toEqual('test')
    expect(response.body.description).toEqual(`test`)
    expect(response.body.price).toEqual(100)
    })
    test('It should search for an item', async () => {
        const user = new User({ name: 'test', email: 'test21@email.com', password: 'test' })
        await user.save()
        const token = await user.createJWT()
        const item = new Item({ name: 'test', description: 'test', price: 100, searchTerm: ['test'], price: 100 })
        await item.save()
        const response = await request(app)
            .get(`api/items/search/test`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(item)
    })
    test('It should display all items', async() => {
        const user = new User({ name: 'test', email: 'test22@email.com', password: 'test' })
        await user.save()
        const token = await user.createJWT()
        const item = new Item({ name: 'test', description: 'test', price: 100, searchTerm: ['test'], price: 100 })
        await item.save()
        const item2 = new Item({ name: 'test', description: 'test', price: 100, searchTerm: ['test'], price: 100 })
        await item2.save()
        const response = await request(app)
            .get('/api/items/')
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(item)
        expect.objectContaining(item2)
    })
    test('It should display all featured items', async() => {
        const user = new User({ name: 'test', email: 'test23@email.com', password: 'test' })
        await user.save()
        const token = await user.createJWT()
        const item = new Item({ name: 'test', description: 'test', price: 100, searchTerm: ['test'], price: 100 })
        await item.save()
        const item2 = new Item({ name: 'test', description: 'test', price: 100, searchTerm: ['test'], price: 100 })
        await item2.save()
        const response = await request(app)
            .get(`/api/items/featured`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(item)
        expect.objectContaining(item2)
    })
    test('It should display all items in a category', async() => {
        const user = new User({ name: 'test', email: 'test24@email.com', password: 'test' })
        await user.save()
        const token = await user.createJWT()
        const department = new Department({name: 'hardware'})
        await department.save()
        const category = new Category({name: 'drills', department: department._id})
        await category.save()
        const item = new Item({ name: 'test', description: 'test', price: 100, searchTerm: ['test'], price: 100 })
        await item.save()
        const item2 = new Item({ name: 'test', description: 'test', price: 100, searchTerm: ['test'], price: 100 })
        await item2.save()
        const response = await request(app)
            .get(`/api/items/category/${category._id}`)
            .set(`Authorization`, `Bearer ${token}`)
        expect(response.statusCode).toBe(200)
        expect.objectContaining(item)
        expect.objectContaining(item2)
    })
})